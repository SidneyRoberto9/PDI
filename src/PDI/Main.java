/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PDI;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author Sidney
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        value = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        imgsrc = new javax.swing.JLabel();
        imgfiltred = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        info = new javax.swing.JLabel();
        tomtext = new javax.swing.JTextField();
        tom = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1408, 608));
        setResizable(false);

        jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "banda", "aumentoDeTonalidade", "grayScale", "grayScaleBanda", "negative", "binarizacao", "brilhoAditivo", "brilhoMultiplicativo", "brilhoAditivoY", "brilhoMultiplicativoY", "negativeY" }));
        jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxActionPerformed(evt);
            }
        });

        jButton1.setText("Apply");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        value.setText("0");
        value.setMaximumSize(new java.awt.Dimension(72, 22));
        value.setMinimumSize(new java.awt.Dimension(72, 22));
        value.setPreferredSize(new java.awt.Dimension(72, 22));
        value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueActionPerformed(evt);
            }
        });

        jButton2.setText("Upload Image");
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Value:");
        jLabel1.setMaximumSize(new java.awt.Dimension(72, 22));
        jLabel1.setMinimumSize(new java.awt.Dimension(72, 22));

        info.setDisplayedMnemonic('0');
        info.setToolTipText("");
        info.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        tomtext.setText("0");
        tomtext.setMaximumSize(new java.awt.Dimension(72, 22));
        tomtext.setMinimumSize(new java.awt.Dimension(72, 22));
        tomtext.setPreferredSize(new java.awt.Dimension(72, 22));
        tomtext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tomtextActionPerformed(evt);
            }
        });

        tom.setText("Tom:");
        tom.setMaximumSize(new java.awt.Dimension(72, 22));
        tom.setMinimumSize(new java.awt.Dimension(72, 22));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imgsrc, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addComponent(info, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(tom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tomtext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(119, 119, 119)
                .addComponent(imgfiltred, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tomtext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(161, 161, 161))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imgsrc, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgfiltred, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        info.getAccessibleContext().setAccessibleDescription("Define a banda de cor utilizada na imagem preencha o campo ' Value ' com: 0 - red (vermelho) 1 - green (verde) 2 - blue (azul)");
        info.getAccessibleContext().setAccessibleParent(info);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxActionPerformed
        // TODO add your handling code here:
        Object selectedItem = jComboBox.getSelectedItem();
        String selectedItemStr = selectedItem.toString();
        
        
        if(selectedItemStr == "negative"){
            info.setText("<html><body>Aplica um Filtro na imagem onde <br>as suas cores seram invertidas</body></html>");
            tomtext.setEnabled(false);
            value.setEnabled(false);
            
        } else if (selectedItemStr == "banda"){
            info.setText("<html><body>Define a banda de cor utilizada na imagem<br>preencha o campo ' Value ' com:<br>0 - red (vermelho)<br>1 - green (verde)<br>2 - blue (azul)</body></html>");
            tomtext.setEnabled(false);
            value.setEnabled(true);
            
        } else if (selectedItemStr == "aumentoDeTonalidade"){
            info.setText("<html><body>Aumenta a tonalidade da cor utilizada na imagem<br>preencha o campo ' Value ' com a cor de banda especifica e o campo ' Tom ' com a tonalidade escolhida:<br>0 - red (vermelho)<br>1 - green (verde)<br>2 - blue (azul)</body></html>");
            tomtext.setEnabled(true);
            value.setEnabled(true);
            
        } else if (selectedItemStr == "grayScale"){
            info.setText("<html><body>Atribui um GrayScale em toda a imagem<br>se utilziando de todas as cores</body></html>");  
            tomtext.setEnabled(false);
            value.setEnabled(false);
             
        } else if (selectedItemStr == "grayScaleBanda") {
            info.setText("<html><body>Atribui um GrayScale em toda a imagem<br>sendo nescessario apenas definiar a banda:<br>0 - red (vermelho)<br>1 - green (verde)<br>2 - blue (azul)</body></html>"); 
            tomtext.setEnabled(false);
            value.setEnabled(true);
            
        } else if (selectedItemStr == "binarizacao"){
            info.setText("<html><body>As cores serão binarizadas<br>sendo nescessario apenas definiar<br>o Limiar em ' Value '</body></html>"); 
            tomtext.setEnabled(false);
            value.setEnabled(true);
            
        } else if (selectedItemStr == "brilhoAditivo") {
            info.setText("<html><body>No campo ' Value ' é nescessario informar<br> a quantidade de brilho ah ser somada</body></html>"); 
            tomtext.setEnabled(false);
            value.setEnabled(true);
            
            
        } else if (selectedItemStr == "brilhoMultiplicativo") {
            info.setText("<html><body>No campo ' Value ' é nescessario informar<br> a quantidade de brilho ah ser multiplicada</body></html>"); 
            tomtext.setEnabled(false);
            value.setEnabled(true);
            
        } else if (selectedItemStr == "brilhoAditivoY") {
            info.setText("<html><body>No campo ' Value ' é nescessario informar<br> a quantidade de brilho ah ser somada<br>Nesse metodo utilizamos a Estutura YIQ</body></html>"); 
            tomtext.setEnabled(false);
            value.setEnabled(true);
                
        } else if (selectedItemStr == "brilhoMultiplicativoY") {
            info.setText("<html><body>No campo ' Value ' é nescessario informar<br> a quantidade de brilho ah ser multiplicada<br>Nesse metodo utilizamos a Estutura YIQ</body></html>"); 
            tomtext.setEnabled(false);
            value.setEnabled(true);
            
        } else if (selectedItemStr == "negativeY") {
              info.setText("<html><body>Aplica um Filtro na imagem onde <br>as suas cores seram invertidas<br>Nesse metodo utilizamos a Estutura YIQ</body></html>");
            tomtext.setEnabled(false);
            value.setEnabled(false);
        } else {
            info.setText(" Campo Invalido, por favor Selecione Outro...");
            tomtext.setEnabled(false);
            value.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBoxActionPerformed

    private void valueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_valueActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            filtro filter = new filtro();
            File f = chooser.getSelectedFile();
            BufferedImage imagem = ImageIO.read(f);
            imgsrc.setIcon(new ImageIcon(filter.resize(imagem, 450,608)));
            filename = f.getAbsolutePath();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
           
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Object selectedItem = jComboBox.getSelectedItem();
        if (selectedItem != null){
            String selectedItemStr = selectedItem.toString();
            filtro filter = new filtro();
            BufferedImage imagem = null;
            try {
                File arquivo = new File(filename);
                imagem = ImageIO.read(arquivo);   
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
           BufferedImage imagemSaida = null;
            
            if (selectedItemStr == "negative"){
                imagemSaida = filter.negative(imagem);
                
            } else if (selectedItemStr == "banda"){
                imagemSaida = filter.banda(imagem, Integer.parseInt(value.getText())); 
            
            } else if (selectedItemStr == "aumentoDeTonalidade"){
                imagemSaida = filter.aumentoDeTonalidade(imagem, Integer.parseInt(value.getText()), Integer.parseInt(tomtext.getText())); 
                
            } else if (selectedItemStr == "grayScale") {
                imagemSaida = filter.grayScale(imagem);
                
            } else if (selectedItemStr == "grayScaleBanda") {
                imagemSaida = filter.grayScaleBanda(imagem, Integer.parseInt(value.getText()));
                
            } else if (selectedItemStr == "binarizacao") {
                imagemSaida = filter.binarizacao(imagem, Integer.parseInt(value.getText())); 
                
            } else if (selectedItemStr == "brilhoAditivo") {
                imagemSaida = filter.brilhoAditivo(imagem, Integer.parseInt(value.getText())); 
            
            } else if (selectedItemStr == "brilhoMultiplicativo") {
                imagemSaida = filter.brilhoMultiplicativo(imagem, Integer.parseInt(value.getText()));
            
            } else if (selectedItemStr == "brilhoAditivoY") {
                imagemSaida = filter.yiq2RGB(filter.brilhoAditivoY(filter.RGB2yiq(imagem), Integer.parseInt(value.getText())));
                
            } else if (selectedItemStr == "brilhoMultiplicativoY") {
                imagemSaida = filter.yiq2RGB(filter.brilhoMultiplicativoY(filter.RGB2yiq(imagem), Integer.parseInt(value.getText()))); 
                
            } else if (selectedItemStr == "negativeY") {
                imagemSaida = filter.yiq2RGB(filter.negativeY(filter.RGB2yiq(imagem)));
            
            } else if (selectedItemStr == "None"){
                imagemSaida = imagem;
            } 
            
            imgfiltred.setIcon(new ImageIcon(filter.resize(imagemSaida, 450,608))); 
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tomtextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tomtextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tomtextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgfiltred;
    private javax.swing.JLabel imgsrc;
    private javax.swing.JLabel info;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel tom;
    private javax.swing.JTextField tomtext;
    private javax.swing.JTextField value;
    // End of variables declaration//GEN-END:variables
    byte[] photo = null;
    String filename = null;
}

